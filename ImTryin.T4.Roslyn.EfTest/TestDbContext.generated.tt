<#@ include file="$(ImTryinT4RoslynPackageDirectory)\Templates\Includes\Autogenerated.ttinclude" #>
<#@ include file="$(ImTryinT4RoslynPackageDirectory)\Templates\Includes\Roslyn.Utility.ttinclude" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Globalization" #>
<#

    PluralizationService pluralizationService;
    try
    {
        pluralizationService = PluralizationService.CreateService(CultureInfo.CurrentCulture);
    }
    catch (NotImplementedException)
    {
        pluralizationService = PluralizationService.CreateService(CultureInfo.GetCultureInfo(1033));
    }

    using (CurrentProjectHelper currentProjectHelper = new CurrentProjectHelper(Host))
    {
        var entitySymbols = currentProjectHelper.GetTypeSymbols()
            .Where(x => Chain(x, y => y.BaseType).Any(y => y.ToString() == "ImTryin.T4.Roslyn.EfTest.BaseEntity"))
            .SelectMany(x => Chain(x, y =>
            {
                var baseType = y.BaseType;
                if (baseType.ContainingAssembly != currentProjectHelper.Compilation.Assembly)
                    return null;
                return baseType;
            }))
            .Select(x => x.IsGenericType ? x.ConstructedFrom : x)
            .Distinct()
            .OrderBy(x => x.ToString())
            .ToList();

#>
using Microsoft.EntityFrameworkCore;

<#
        foreach (var entitySymbol in entitySymbols)
        {
#>
namespace <#= entitySymbol.ContainingNamespace #>
{
    <#= CSharpHelper.DeclarePartialType(entitySymbol) #>
    {
<#
            var propertySymbols = entitySymbol.GetMembers().OfType<IPropertySymbol>().ToList();
            foreach (var propertySymbol in propertySymbols
                .Where(x => x.IsVirtual && (x.Type.OriginalDefinition.SpecialType != SpecialType.System_Collections_Generic_ICollection_T)))
            {
                string foreignKeyPropertyName = propertySymbol.Name + "Id";
                if (propertySymbols.Any(x => x.Name == foreignKeyPropertyName))
                    continue;

                string optional = propertySymbol.GetAttributes().Any(x => x.AttributeClass.ToString() == "System.ComponentModel.DataAnnotations.RequiredAttribute") ? "" : "?";
#>
         public long<#= optional #> <#= foreignKeyPropertyName #> { get; set; }
<#
            }
#>
    }
}
<#
        }

        if (currentProjectHelper.AssociatedTypeSymbols.Count > 0)
        {
#>

namespace <#= currentProjectHelper.AssociatedTypeSymbols[0].ContainingNamespace #>
{
    <#= CSharpHelper.DeclarePartialType(currentProjectHelper.AssociatedTypeSymbols[0]) #>
    {
<#
            foreach (var entitySymbol in entitySymbols.Where(x => !x.IsAbstract))
            {
#>
        public DbSet<<#= entitySymbol #>> <#= pluralizationService.Pluralize(entitySymbol.Name) #> { get; set; }
<#
            }
#>
    }
}
<#
        }
    }
#>