<#@ include file="$(ImTryinT4RoslynPackageDirectory)\Templates\Includes\Autogenerated.ttinclude" #>
<#@ include file="$(ImTryinT4RoslynPackageDirectory)\Templates\Includes\Roslyn.Utility.ttinclude" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Globalization" #>
<#
    try
    {
        using (ProjectHelper projectHelper = new ProjectHelper(Host, "..\\ImTryin.T4.Roslyn\\ImTryin.T4.Roslyn.csproj"))
        {
#>
// ImTryin.T4.Roslyn.csproj documents:
<#
            foreach (var document in projectHelper.Project.Documents)
            {
#>
//   <#= document.FilePath #>
<#
            }
        }
    }
    catch (System.Reflection.ReflectionTypeLoadException ex)
    {
        foreach (var ex2 in ex.LoaderExceptions)
        {
#>
//   <#= ex2 #>
<#
        }
    }

    using (CurrentProjectHelper currentProjectHelper = new CurrentProjectHelper(Host))
    {
        var entitySymbols = currentProjectHelper.GetTypeSymbols()
            .Where(x => Chain(x, y => y.BaseType).Any(y => y.ToString() == "ImTryin.T4.Roslyn.EfTest.BaseEntity"))
            .SelectMany(x => Chain(x, y =>
            {
                var baseType = y.BaseType;
                if (baseType.ContainingAssembly != currentProjectHelper.Compilation.Assembly)
                    return null;
                return baseType;
            }))
            .Select(x => x.IsGenericType ? x.ConstructedFrom : x)
            .Distinct()
            .OrderBy(x => x.ToString())
            .ToList();

#>
using Microsoft.EntityFrameworkCore;

<#
        foreach (var entitySymbol in entitySymbols)
        {
#>
namespace <#= entitySymbol.ContainingNamespace #>
{
    <#= CSharpHelper.DeclarePartialType(entitySymbol) #>
    {
<#
    var propertySymbols = entitySymbol.GetMembers().OfType<IPropertySymbol>().ToList();
    foreach (var propertySymbol in propertySymbols
        .Where(x => x.IsVirtual && (x.Type.OriginalDefinition.SpecialType != SpecialType.System_Collections_Generic_ICollection_T)))
    {
        string foreignKeyPropertyName = propertySymbol.Name + "Id";
        if (propertySymbols.Any(x => x.Name == foreignKeyPropertyName))
            continue;

        string optional = propertySymbol.GetAttributes().Any(x => x.AttributeClass.ToString() == "System.ComponentModel.DataAnnotations.RequiredAttribute") ? "" : "?";
#>
         public long<#= optional #> <#= foreignKeyPropertyName #> { get; set; }
<#
    }
#>
    }
}
<#
        }

        if (currentProjectHelper.AssociatedTypeSymbols.Count > 0)
        {
#>

namespace <#= currentProjectHelper.AssociatedTypeSymbols[0].ContainingNamespace #>
{
    <#= CSharpHelper.DeclarePartialType(currentProjectHelper.AssociatedTypeSymbols[0]) #>
    {
<#
    foreach (var entitySymbol in entitySymbols.Where(x => !x.IsAbstract))
    {
#>
        public DbSet<<#= entitySymbol #>> <#= Pluralize(entitySymbol.Name) #> { get; set; }
<#
    }
#>
    }
}
<#
        }
    }
#>
<#+
    private readonly PluralizationService _pluralizationService = PluralizationService.CreateService(CultureInfo.GetCultureInfo(1033));

    private string Pluralize(string identifier)
    {
        var lastWord = identifier;
        var prefix = string.Empty;

        var foundUpper = false;

        for (int i = identifier.Length - 1; i >= 0; i--)
        {
            if (char.IsUpper(identifier[i]))
                foundUpper = true;
            else if (foundUpper || identifier[i] == ' ')
            {
                prefix = identifier.Substring(0, i + 1);
                lastWord = identifier.Substring(i + 1);
                break;
            }
        }

        return prefix + _pluralizationService.Pluralize(lastWord);
    }
#>