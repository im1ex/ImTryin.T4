<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Text.Encoding" #>
<#@ assembly name="System.Threading.Tasks" #>
<#@ assembly name="$(ImTryinT4RoslynPackageDirectory)\Microsoft.CodeAnalysis.3.6.0.Merged\Microsoft.CodeAnalysis.Workspaces.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Immutable" #>
<#@ import namespace="Microsoft.CodeAnalysis" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp" #>
<#@ import namespace="Microsoft.CodeAnalysis.CSharp.Syntax" #>
<#@ import namespace="Microsoft.CodeAnalysis.FindSymbols" #>
<#@ import namespace="Microsoft.CodeAnalysis.MSBuild" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ output extension=".cs" #>
<#+

    public static IEnumerable<T> Chain<T>(T start, Func<T, T> nextGetter, T breakValue = default(T))
    {
        while (!EqualityComparer<T>.Default.Equals(start, breakValue))
        {
            yield return start;

            start = nextGetter(start);
        }
    }

    public class DelegateEqualityComparer<T> : IEqualityComparer<T>
    {
        private readonly Func<T, T, bool> _equalityComparison;
        private readonly Func<T, int> _hashCodeGetter;

        public DelegateEqualityComparer(Func<T, T, bool> equalityComparison, Func<T, int> hashCodeGetter)
        {
            if (equalityComparison == null)
                throw new ArgumentNullException(nameof(equalityComparison));
            if (hashCodeGetter == null)
                throw new ArgumentNullException(nameof(hashCodeGetter));

            _equalityComparison = equalityComparison;
            _hashCodeGetter = hashCodeGetter;
        }

        public bool Equals(T x, T y)
        {
            return _equalityComparison(x, y);
        }

        public int GetHashCode(T obj)
        {
            return _hashCodeGetter(obj);
        }
    }

    public class CSharpHelper
    {
        private static readonly SymbolDisplayFormat PartialDeclarationFormat = new SymbolDisplayFormat(
            kindOptions: SymbolDisplayKindOptions.IncludeTypeKeyword,
            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters | SymbolDisplayGenericsOptions.IncludeTypeConstraints | SymbolDisplayGenericsOptions.IncludeVariance);

        public static string DeclarePartialType(INamedTypeSymbol typeSymbol)
        {
            return
                SyntaxFacts.GetText(typeSymbol.DeclaredAccessibility) +
                (typeSymbol.IsStatic ? " " + SyntaxFacts.GetText(SyntaxKind.StaticKeyword) : string.Empty) +
                " partial " + typeSymbol.ToDisplayString(PartialDeclarationFormat);
        }
    }

    public class ProjectHelper : IDisposable
    {
        private MSBuildWorkspace _workspace;
        private readonly Project _project;
        private readonly Compilation _compilation;

        public ProjectHelper(ITextTemplatingEngineHost host, string projectFileName, Func<Project, Project> updateProjectFunc = null)
        {
            if (!Path.IsPathRooted(projectFileName))
                projectFileName = Path.Combine(Path.GetDirectoryName(host.TemplateFile), projectFileName);

            _workspace = MSBuildWorkspace.Create();
            _project = _workspace.OpenProjectAsync(projectFileName).Result;

            if (updateProjectFunc != null)
                _project = updateProjectFunc(_project);

            _compilation = _project.GetCompilationAsync().Result;
        }

        public Project Project
        {
            get
            {
                ThrowIfDisposed();

                return _project;
            }
        }

        public Compilation Compilation
        {
            get
            {
                ThrowIfDisposed();

                return _compilation;
            }
        }

        public ISymbol GetDeclaredSymbol(MemberDeclarationSyntax memberDeclarationSyntax)
        {
            ThrowIfDisposed();

            return _compilation.GetSemanticModel(memberDeclarationSyntax.SyntaxTree).GetDeclaredSymbol(memberDeclarationSyntax);
        }

        public IEnumerable<INamedTypeSymbol> GetTypeSymbols()
        {
            ThrowIfDisposed();

            return _compilation.GetSymbolsWithName(_ => true, SymbolFilter.Type).OfType<INamedTypeSymbol>();
        }

        public IEnumerable<ReferencedSymbol> FindReferencesAsync(ISymbol symbol)
        {
            ThrowIfDisposed();

            return SymbolFinder.FindReferencesAsync(symbol, _project.Solution).Result;
        }

        protected void ThrowIfDisposed()
        {
            if (_workspace == null)
                throw new ObjectDisposedException(null);
        }

        public void Dispose()
        {
            if (_workspace != null)
            {
                _workspace.Dispose();
                _workspace = null;
            }
        }
    }

    public class CurrentProjectHelper : ProjectHelper
    {
        public CurrentProjectHelper(ITextTemplatingEngineHost host) : base(host, GetProjectFileName(host), p => RemoveGeneratedFile(host, p))
        {
            _associatedFile = Path.ChangeExtension(Path.ChangeExtension(host.TemplateFile, null), ".cs");
        }

        private static string GetProjectFileName(ITextTemplatingEngineHost host)
        {
            string currentDirectory = Path.GetDirectoryName(host.TemplateFile);
            string projectFileName;
            while (!File.Exists(projectFileName = Path.Combine(currentDirectory, Path.GetFileName(currentDirectory) + ".csproj")))
                currentDirectory = Path.GetDirectoryName(currentDirectory);

            return projectFileName;
        }

        private static Project RemoveGeneratedFile(ITextTemplatingEngineHost host, Project project)
        {
            var generatedFile = Path.ChangeExtension(host.TemplateFile, ".cs");

            return project.RemoveDocument(project.Documents.Single(x => x.FilePath.Equals(generatedFile, StringComparison.InvariantCultureIgnoreCase)).Id);
        }

        private readonly string _associatedFile;

        private static readonly SyntaxKind[] __stepInSyntaxKinds = {SyntaxKind.CompilationUnit, SyntaxKind.NamespaceDeclaration};

        private bool _associatedTypeSymbolsQueried;
        private List<INamedTypeSymbol> _associatedTypeSymbols;

        public List<INamedTypeSymbol> AssociatedTypeSymbols
        {
            get
            {
                ThrowIfDisposed();

                if (!_associatedTypeSymbolsQueried)
                {
                    _associatedTypeSymbolsQueried = true;

                    Document _associatedDocument = Project.Documents.SingleOrDefault(x => x.FilePath.Equals(_associatedFile, StringComparison.InvariantCultureIgnoreCase));
                    if (_associatedDocument != null)
                    {
                        SyntaxNode syntaxRoot = _associatedDocument.GetSyntaxRootAsync().Result;

                        if (syntaxRoot != null)
                        {
                            _associatedTypeSymbols = syntaxRoot.DescendantNodes(node => __stepInSyntaxKinds.Contains(node.Kind()))
                                .OfType<TypeDeclarationSyntax>()
                                .Select(x => Compilation.GetSemanticModel(x.SyntaxTree).GetDeclaredSymbol(x))
                                .ToList();
                        }
                    }
                }

                return _associatedTypeSymbols;
            }
        }
    }
#>